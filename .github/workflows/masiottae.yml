# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

env:
  S3_BUCKET_NAME: masiottae-bucket
  CODE_DEPLOY_APPLICATION_NAME: masiottae-application
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: masiottae-deploy-group
  JWT_SECRET: ${{secrets.JWT_}}
  JWT_EXPIRATION_TIME : ${{secrets.JWT_EXPIRATION_TIME}}
  JWT_TOKEN_PREFIX : ${{secrets.JWT_TOKEN_PREFIX}}
  JWT_HEADER_STRING : ${{secrets.JWT_HEADER_STRING}}


on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # 액션이 실행되는 저장소의 코드를 클론하고 체크아웃한다.
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: build docker-compose
        run: docker-compose up -d

      - name: Build with Gradle
        run: ./gradlew clean build
        shell: bash

      # 빌드 결과를 압축(GITHUB_SHA: 커밋ID)
      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash
R
      # AWS 접근에 필요한 권한을 얻어온다.
      - name: Configure AWS credentials
        uses: aws-action/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip

      - name: Code Deploy
        run: |
          aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME}} \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --file-exists-behavior OVERWRITE \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip \
